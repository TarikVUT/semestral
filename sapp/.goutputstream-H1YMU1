'''
Author : Tarik Alkanan

'''
import os
'''
The line below is to hide {pygame 2.1.2 (SDL 2.0.16, Python 3.10.7)
Hello from the pygame community. https://www.pygame.org/contribute.html
}
'''
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"       

from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
#import playsound
import pygame 
#from pydub import AudioSegment
#from pydub.playback import play
#from winsound import *
from tkinter import ttk
from pygame import mixer
import hashlib
import string



#Create the window
count = 0

window = Tk()
screen_width = window.winfo_screenwidth()          ##get screen width
screen_height= window.winfo_screenheight()         ##get screen height
sound_status = False
pygame.mixer.init()

'''
Resize image 
'''
def resizeImage(image,width,height):
    resizedImage=image.resize((int(screen_width/2 - 10),int(screen_height/2 - 10)))
    newImage=ImageTk.PhotoImage(resizedImage)
    return newImage

def play_shutdown(event):
    pygame.mixer.music.load('/home/GUI/wav/shutdown.wav')
    pygame.mixer.music.play()
    
def play_browser(event):
    pygame.mixer.music.load('/home/GUI/wav/internet.wav')
    pygame.mixer.music.play()
    
def play_email(event):
    pygame.mixer.music.load('/home/GUI/wav/email.wav')
    pygame.mixer.music.play()
    
def play_editor(event):
    pygame.mixer.music.load('/home/GUI/wav/editor.wav')
    pygame.mixer.music.play()


'''
import images
'''
img_email=(Image.open("/home/GUI/Images/email.png"))       ##Email

img_close=(Image.open("/home/GUI/Images/shutdown.png"))    ##Shutdown

img_browser=(Image.open("/home/GUI/Images/browser.png"))   ##Browser

img_editor=(Image.open("/home/GUI/Images/texteditor.png")) ##Test editor

def switch(): 
    global sound_status
    sound_status = True
    #print(sound_status)
    
        
def texteditor_window():

    os.system('python /home/stext/main.py')
'''
    new_window = Toplevel(window)
    new_window.geometry("%dx%d"%(screen_width,screen_height))
    new_window.title("Editor")
    lab_new_window=Label(new_window, text=("Editor"))
    lab_new_window.pack(pady=30)
''' 
def browser_window():
    new_window = Toplevel(window)
    new_window.geometry("%dx%d"%(screen_width,screen_height))
    new_window.title("Editor")
    lab_new_window=Label(new_window, text=("Editor"))
    lab_new_window.pack(pady=30)

def email_window():
    new_window = Toplevel(window)
    new_window.geometry("%dx%d"%(screen_width,screen_height))
    new_window.title("Email")
    lab=Label(new_window ,text=("Email"),fg="red",font=("Helvetica",25))
    lab.pack(pady=30)

def shutdown_system(): # shutdown function 
    os.system("shutdown now -h")

def resizeIcon(image): ## size for confirm Icon
    resizedImage=image.resize((50,50))
    newIcon=ImageTk.PhotoImage(resizedImage)

    return newIcon
def hash_fun(string):
    hashed_string = hashlib.sha256(string.encode('utf-8')).hexdigest()
    return hashed_string
#function to reboot the system
def reboot_sys():
    os.system('reboot')
    
#function to open terminal            
def clear_entry():
    username_entry.delete(0,'end')
    password_entry.delete(0,'end')
    
def change_password():
    def click():
        username = username_box.get()
        password = pw_box.get()
        confirmed_pw = pw_confirm_box.get()
        file_user= open("/home/GUI/users.txt", "r+")
        user_from_file=file_user.read()
    
        caps = string.ascii_uppercase
        numbers = []
        for i in range(10):
            numbers.append(str(i))
        special_chars = ['!', '@', '#', '$', '%']
        name_check = False
    
        #hash fun
       # def hash_fun(string):
         #   hashed_string = hashlib.sha256(string.encode('utf-8')).hexdigest()
         #   return hashed_string
        #if text contains a number
        def number_found(name):
            found = False
            for number in numbers:
                if name.find(number) > -1:
                    found = True
            return found
        
        #Capital letter
        def caps_found(pw):
            found = False
            for letter in caps:
                if pw.find(letter) > -1:
                     found = True
            return found

        def special_found(pw):
            found = False
            for char in special_chars:
                if pw.find(char) > -1:
                    found = True
            return found

    
        if username != user_from_file[:-1]:
            output.configure(text="Invalid user",font="green 15 bold")
            username_box.delete(0,'end')
            return
        if password != confirmed_pw and len(password) > 7:
            output.configure(text="Passwords do not match")
            return
        if not number_found(password):
            output.configure(text="Password must contain a number")
            return
        if not special_found(password):
            output.configure(text="Password must contain a special character (!, @, #, $, %)")
            return
        if not caps_found(password):
            output.configure(text="Password must contain a capital letter")
            return
        if len(password) < 8:
            output.configure(text="Password must be at least 8 characters long")
            return
        if number_found(username):
            output.configure(text="Username cannot contain numbers")
            return
        
    
        file_pass = open("/home/GUI/test.txt", "w")
        file_pass.writelines(hash_fun(password))
        file_pass.close()  
        change_password_win.destroy()
        messagebox.showinfo("info", "Password change was successful")

    change_password_win = Toplevel(window)
    change_password_win.title("Set new password")
    '''
    change_password_win_width = 500
    change_password_win_height = 350
    x_point_change_password_win = (screen_width/2)-(change_password_win_width/2)
    y_point_change_password_win = (screen_height/2)-(change_password_win_height/2)
    change_password_win.geometry("%dx%d+%d+%d"%(change_password_win_width,
                             change_password_win_height,x_point_change_password_win,
                             y_point_change_password_win))
    '''
    change_password_win.configure(bg="#D3D3D3")
    change_password_win.resizable(0,0)

    user_lbl = Label(change_password_win, text="Enter your username:", bg="#D3D3D3", font="none 12 bold")
    user_lbl.grid(row=1, column=0, sticky=EW, pady=8)
    pass_lbl = Label(change_password_win, text="Enter your password:", bg="#D3D3D3", font="none 12 bold")

    pass_lbl.grid(row=3, column=0, sticky=EW, pady=8)
    cpass_lbl = Label(change_password_win, text="Confirm password:", bg="#D3D3D3", font="none 12 bold")
    cpass_lbl.grid(row=5, column=0, sticky=EW, pady=8)

    username_box = Entry(change_password_win, width=40, bg="white")
    username_box.grid(row=2, column=0)

    pw_box = Entry(change_password_win, width=40, bg="white",show='*')
    pw_box.grid(row=4, column=0)

    pw_confirm_box = Entry(change_password_win, width=40, bg="white",show='*')
    pw_confirm_box.grid(row=6, column=0)

    sub_btn=Button(change_password_win, text="Change", width=6, command=click) 
    sub_btn.grid(row=7, column=0, pady=10)

    output = Label(change_password_win, text="Welcome", bg="#D3D3D3", font="none 15", width=60)
    output.grid(row=8, column=0, sticky=EW, pady=10)

#window for rood
def root_window():
    #start up the gdm (GUI)
    def run_gdm():
        os.system('sudo systemctl start gdm')
    
    def change_pass():
        os.system('python /home/GUI/pass.py')
    
    root_win = Toplevel(window)
    root_win.title('Root')
    root_win_width = 400
    root_win_height = 230
    x_point_root_win = (screen_width/2)-(root_win_width/2)
    y_point_root_win = (screen_height/2)-(root_win_height/2)
    root_win.geometry("%dx%d+%d+%d"%(root_win_width,
                             root_win_height,x_point_root_win,
                             y_point_root_win))
    root_win.configure(bg="#D3D3D3")
    root_win.resizable(0,0)

    GDM_lbl = Label(root_win, text="- Run GDM:", bg="#D3D3D3", font="none 12 bold")
    GDM_lbl.grid(row=1, column=0, sticky=W, pady=8, padx = 10)
    close_lbl = Label(root_win, text="- Close desktop:", bg="#D3D3D3",  font="none 12 bold")
    close_lbl.grid(row=3, column=0, sticky=W, pady=8, padx = 10)
    change_lbl = Label(root_win, text="- Change user's password", bg="#D3D3D3",  font="none 12 bold")
    change_lbl.grid(row=5, column=0, sticky=W, pady=8, padx = 10)
    reboot_lbl = Label(root_win, text="- Reboot the OS", bg="#D3D3D3",  font="none 12 bold")
    reboot_lbl.grid(row=7, column=0, sticky=W, pady=8, padx = 10)


    GDM_btn=Button(root_win, text="Run", width=5,bd = 3, bg="#74897c",overrelief = SUNKEN,
                font="none 10 bold",activebackground="#792f69",activeforeground = "#f9fbfc",
                command=lambda:[root_win.destroy(),run_gdm()])            
    GDM_btn.grid(row=1, column=2,sticky = E,padx = 10, pady=8)
    
    close_btn=Button(root_win, text="Close", width=5,bd = 3, bg="#74897c",overrelief = SUNKEN,
                font="none 10 bold",activebackground="#792f69",activeforeground = "#f9fbfc",
                command = window.destroy)                
    close_btn.grid(row=3, column=2,sticky = E,padx = 10, pady=8)

    change_btn=Button(root_win, text="Change", width=5,bd = 3, bg="#74897c",overrelief = SUNKEN, 
                font="none 10 bold",activebackground = "#792f69",activeforeground = "#f9fbfc",
                command=lambda:[root_win.destroy(),change_password()]) 
    change_btn.grid(row=5, column=2,sticky = E,padx = 10, pady=8)
    
    reboot_btn=Button(root_win, text="Reboot", width=5,bd = 3, bg="#74897c",overrelief = SUNKEN, 
                font="none 10 bold",activebackground = "#792f69",activeforeground = "#f9fbfc",
                command=lambda:[root_win.destroy(),reboot_sys()]) 
    reboot_btn.grid(row=7, column=2,sticky = E,padx = 10, pady=8)

def check_root_user():
    def get_data(): 
        global count
        count =count + 1
        file_users= open("/home/GUI/users.txt", "r")
        file_passwords= open("/home/GUI/passwords.txt", "r")
        #get values from files
        users_from_file = file_users.read()
        passwords_from_file=file_passwords.read()
        file_passwords.close()
        file_users.close()
    
        #Get values from entry
        username= check_username.get()
        password=check_password.get() 
        if users_from_file[:-1] == username and passwords_from_file[:-1] == hash_fun(password):
           check_root_win.destroy()
           root_window()
           return
            
        if count >= 3 :
             info_label.config( text = 'Oops', fg = 'red',font=("Helvetica",12))
             check_root_win.destroy()
             messagebox.showwarning("Warning", "Adding 3-times incorrect password")
             return 
             
        if username == '' or password =='':
              info_label.config( text = 'All fields requried !', fg = 'red',font=("Helvetica",12))
              clear_entry()
        else:
            info_label.config(text = 'Incorrect inputs',fg = 'red',font=("Helvetica",12))
            clear_entry()
        

    global check_username
    global check_password
    global info_label
    global username_entry
    global password_entry
    check_username = StringVar()
    check_password = StringVar()
    
    check_root_win = Toplevel(window)
    check_root_win.title('Permission only for Root')
    check_root_win_width = 350
    check_root_win_height = 200
    
    x_point=(screen_width/2)-(check_root_win_width/2)
    y_point=(screen_height/2)-(check_root_win_height/2)
    check_root_win.geometry("%dx%d+%d+%d"%(check_root_win_width,
    check_root_win_height,x_point,y_point))
    check_root_win.resizable(0,0)
    
    
    #Labels
    username_label = Label(check_root_win, text="User Name",font=("None 10 bold"))
    username_label.grid(row=0, column=0, pady = 10)
    password_label = Label(check_root_win,text="Password",font=("None 10 bold"))
    password_label.grid(row=1, column=0, pady = 8)
    info_label = Label(check_root_win)
    info_label.grid(row = 2 ,column = 1, pady =10)
    
    #Entry
    username_entry = Entry(check_root_win, textvariable=check_username)
    username_entry.grid(row=0, column=1, pady = 10)
    password_entry = Entry(check_root_win, textvariable=check_password, show='*')
    password_entry.grid(row=1,column=1, pady = 8)
    
    #Button
    login_button = Button(check_root_win, text="Login",bd = 2,
                                        overrelief = SUNKEN, 
                                        command=get_data)
    login_button.grid(row=3, column=0, sticky = W ,padx = 20)
    
    close_button = Button(check_root_win, text="Close",bd = 2,
                                        overrelief = SUNKEN,
                                        command=check_root_win.destroy)
    close_button.grid(row=3, column=3, sticky = W )

       
def message_window():# confirm message
    
        
    
    confirm_win = Toplevel(window)
    confirm_win.title('Shut down')
    confirm_win_width = 600
    confirm_win_height = 240
    x_point_confirm_win = (screen_width/2)-(confirm_win_width/2)
    y_point_confirm_win = (screen_height/2)-(confirm_win_height/2)
    confirm_win.geometry("%dx%d+%d+%d"%(confirm_win_width,
                             confirm_win_height,x_point_confirm_win,
                             y_point_confirm_win))
    confirm_win.configure(bg="#D3D3D3")
    confirm_win.resizable(0,0)
    
    message = "Are you sure that you want to shutdown the Computer? "
    shutdown_img= (Image.open("/home/GUI/Images/shutdown_confirm.png"))
    war_img= (Image.open("/home/GUI/Images/warning.png"))
    cancel_img=(Image.open("/home/GUI/Images/cancel.png"))
    shutdown_img1=resizeIcon(shutdown_img)
    image_warning=resizeIcon(war_img)
    image_cancel=resizeIcon(cancel_img)
    '''
    Add a label to ask for confirm
    '''
    confirm_text_lbl=Label(confirm_win, text=message,
                           font=("Times",15,"bold"),
                           image=image_warning,bg = "#D3D3D3",
                           compound=RIGHT)
    confirm_text_lbl.image=image_warning
   
    '''
    Add a ok button
    '''
    ok_btn =Button(confirm_win, text='OK',font=('Times', 20),
                   fg="#7d2811",bd=5,overrelief = SUNKEN,
                   image=shutdown_img1,width=120,
                   activebackground="#CB112E",
                   compound=LEFT,
                   command=shutdown_system)
    ok_btn.image=shutdown_img1
    
    '''
    Add a Cancel button
    '''
    cancel_btn =Button(confirm_win, text='Cancel',
                       font=('Times', 20),
                       fg="#7d2811",bd=5,overrelief = SUNKEN,
                       image=image_cancel,width=120,
                       compound=LEFT,
                       activebackground="#53B4DA",
                       command=confirm_win.destroy)
    cancel_btn.image=image_cancel
    
    '''
    Add a root button 
    '''
    root_btn=Button(confirm_win, text='root',
                       font=('Times', 7),
                       fg="#7d2811",bd=0,bg = "#D3D3D3",
                       activebackground="#D3D3E3",
                       command=lambda:[confirm_win.destroy(),check_root_user()])   #run two functions
    

    sound_btn=Button(confirm_win, text='Sound',
                       font=('Times', 18),
                       fg="#7d2811",bd=5,
                       activebackground="#D3D3E3"
                       ,command=switch)   #run two functions
    if sound_status:
        sound_btn.config(bg = "green")
    else:
        sound_btn.config(bg = "#D3D3D3")
    
    root_btn.grid(row = 0, column = 0,sticky = W)                   
    confirm_text_lbl.grid(row = 1 ,column = 0, padx = 20)                  
    ok_btn.grid(row = 2, column = 0,sticky = W, padx = 20, pady = 8)
    cancel_btn.grid(row = 2, column = 0, sticky = E,pady = 8)
    sound_btn.grid(row = 3, column = 0,sticky = N, pady = 8)
    #sound_btn.bind('<Button-1>',status_of_sound)
    

def open_smail():
    os.system('python /home/smail/smail.py')
'''
Resize the imported images to set it in buttons 
'''
img_close_resized=resizeImage(img_close,screen_width,screen_height)
img_email_resized=resizeImage(img_email,screen_width,screen_height)
img_browser_resized=resizeImage(img_browser,screen_width,screen_height)
img_editor_resized=resizeImage(img_editor,screen_width,screen_height)

##set screen size
window.geometry("%dx%d" % (screen_width,screen_height))   
window.attributes('-fullscreen',True)
window.resizable(0,0)
window.title("Senior OS")

#Button on desktop

browserButton=Button(window,text="Browser",image = img_browser_resized,
                     activebackground="#53B4DA",
                     bd=5,overrelief = SUNKEN,
                     command=window.destroy) #browser_window


emailButton=Button(window,text="Email",image =img_email_resized,
                   activebackground="#FFC600",
                   overrelief = SUNKEN,
                   bd=5,command =open_smail)


editorButton=Button(window,text="Editor",image = img_editor_resized,
                    activebackground="#00FF00",
                    bd=5,overrelief = SUNKEN,
                    command=texteditor_window)
shutdownButton =Button(window,image =img_close_resized,
                   activebackground="#FE0000",
                   overrelief = SUNKEN,
                   bd=5,command=message_window)
                   
shutdownButton.place(x=screen_width/2,y=screen_height/2)                  
emailButton.place(x=screen_width/2,y=0)
editorButton.place(x=0,y=screen_height/2)                  
browserButton.place(x=0,y=0)

if(sound_status):
    emailButton.bind('<Enter>',play_email)
    editorButton.bind('<Enter>',play_editor)
    browserButton.bind('<Enter>',play_browser)
    shutdownButton.bind('<Enter>',play_shutdown)
    


window.mainloop()
